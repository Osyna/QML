import { Entity, PrimaryGeneratedColumn, Column } from 'typeorm';

@Entity()
export class Question {
  @PrimaryGeneratedColumn()
  id: number;

  @Column()
  type: string;

  @Column({ nullable: true })
  minChar: number;

  @Column({ nullable: true })
  maxChar: number;

  @Column()
  checkText: string;

  @Column({ type: 'real', nullable: true })
  points: number;

  @Column({ nullable: true })
  difficulty: string;

  @Column({ nullable: true })
  category: string;

  @Column({ nullable: true })
  timeLimit: number;

  @Column({ nullable: true })
  version: string;

  @Column({ type: 'text', nullable: true })
  content: string;

  // If you have multimedia URLs or other related fields, you can add them here
  // Example:
  // @Column({ nullable: true })
  // multimediaUrl: string;

  // If you have an answers array or other complex structures, you might need to use
  // a TypeORM relation or store it as a JSON string
  // Example:
  // @Column({ type: 'json', nullable: true })
  // answers: any[];
}


@Entity()
export class QuestionPool {
  @PrimaryGeneratedColumn()
  id: number;

  @Column()
  name: string;

  @Column({ type: 'text', nullable: true })
  description: string;

  @Column({ type: 'text', nullable: true })
  tags: string;

  // pool is a list of Question IDs
  @Column({ type: 'json', nullable: true })
  pool: number[];

  @Column({ nullable: true })
  version: string;

  @Column({ nullable: true })
  difficulty: string;

  @Column({ nullable: true })
  category: string;
}

@Entity()
export class Questionnaire {
  @PrimaryGeneratedColumn()
  id: number; // ID of the Questionnaire

  @Column() 
  name: string; // Name of the Questionnaire

  @Column({ type: 'text', nullable: true })
  description: string; // Description of Questionnaire

  @Column({ type: 'text', nullable: true })
  tags: string; // Tags of Questionnaire

  
  @Column()
  type: string; // Type of Questionnaire
  // Type : QuestionsAnswers / Survey / RandomQuestions (Link to Group of ID or a Pool)
  
  @Column({ nullable: true })
  maxQuestions: number; // Max randomly selected questions
   
  @Column({ type: 'json', nullable: true })
  pool: number[]; // List of Questions "IDs" or Pool ID

  
  @Column({ nullable: true })
  version: string; // Version of the Questionnaire 

  @Column({ nullable: true })
  difficulty: string; // Difficulty of the Questionnaire

  @Column({ nullable: true })
  category: string; // Category of the Questionnaire

  @Column({ nullable: true })
  timeLimit: number; // Time in seconds to achieve/complete the Questionnaire

  @Column({ nullable: true })
  points: number; // Max Number of points for the Questionnaire 



  // Maybe the same (calculated by the server)
  @Column({ nullable: true })
  passPercentage: number; // Percentage to pass/validate the Questionnaire
  @Column({ nullable: true })
  passPoints: number; // Points to pass the Questionnaire


  @Column({ nullable: true })
  passText: string; // Text displayed to the User, when the user pass the Questionnaire
  @Column({ nullable: true })
  failText: string; // Text displayed to the User, when the user fail the Questionnaire

  @Column({ nullable: true })
  showResult: boolean; // Show Result of the Questionnaire 

  @Column({ nullable: true })
  showFeedback: boolean; // Show Feedback 
  @Column({ nullable: true })
  Feedback: string; // Feedback defined by the user / Generated by AI (LLM)

  @Column({ nullable: true })
  showDifficulty: boolean; // Show the difficulty of the Questions / Questionnaire

  @Column({ nullable: true })
  showCategory: boolean; // Show the category of the Questions / Questionnaire

  @Column({ nullable: true })
  showTags: boolean; // Show the tags of the Questions / Questionnarie

  @Column({ nullable: true })
  showTimeLimit: boolean; // Show the time limit to complete the Questionnaire

  @Column({ nullable: true })
  showTime: boolean; // Show the time spent by the user on the Questionnaire

  @Column({ nullable: true })
  showPoints: boolean; // Show the points of the user
  @Column({ nullable: true })
  showScore: boolean; // Show the score of the user at the end of the questionnaire

  @Column({ nullable: true })
  showPassPercentage: boolean; // Show the pass percentage 

  @Column({ nullable: true })
  showPassPoints: boolean; // Show the points to pass
}
